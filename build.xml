<?xml version="1.0" encoding="UTF-8"?>
<!-- ================================================== -->
<!-- BUILDFILE FOR WEBROD

	Ant reads all arguments from build.properties file.
		webapp.home - directory where the application will be installed eg.  /tomcat/webapps
		servletapi.jar - servletapi.jar file location eg. /tomcat/common/lib/srvletapi.jar
		vhost - if defined, the application will be installed as a new virtual host. 
			Otherwise it is installed under webapps folder under existing virtual host.

	If build.properties doesn't exist yet, then make a copy from default.properties and rename it to build.properties. Modify properties, if needed.
	


     The main targets are:

	compile
	   compiles java classes into classes.dir.

	buildjar
	   builds rod.jar into WEB-INF/lib directory. removes also compiled java classes from classes directory.

     install
        creates the correct deployment directory structure in the target webapp.home and
        copies all web (jsp, xsl, xml,images, css and js), configuration (web.xml)
        related data there, java libraries and builds jar file.

     clean
        this target removes all compiled java classes from classes.dir,
        but does not touch the rest (jsp, html, xml, stylesheets etc.)


	 default is install 
  -->
<!-- use JAR instead of classes becaiuse it is easier to debug errors -->



<project name='webrod' default='install' basedir='.'>

	<!-- set global properties for this build -->
	<!-- reads default parametrs from build.properties file -->

	<target name="init">
		<condition property="build.properties.exists">
			<available file="build.properties" />
		</condition>

		<fail unless="build.properties.exists"
		    message="Couldn't find build.properties file! Make a copy from default.properties and rename it to build.properties. Modify properties, if needed."/>

		<loadproperties srcFile="build.properties"/>

		<fail unless="webapp.home"
		    message="Mandatory webapp.home property is missing in build.properties file. Please provide a directory name as webapp.home property value where the application will be installed eg.  webapp.home=/tomcat/webapps/webrod "/>

		<property name="src" value="src"/>
		<property name="lib" value="WEB-INF/lib"/>
		<property name="classes.dir" value="target/classes"/>
		<property name="build.home" value="target"/>
	</target>

	<target name='compile' depends="init" description="compiles java classes into classes path">
	    <!-- Compile the java code from ${src} into ${build} -->
		<mkdir dir="target"/>
		<mkdir dir="${classes.dir}"/>
		<javac deprecation='off' srcdir='${src}'
		    destdir='${classes.dir}' debug='on'
		    classpath='public/WEB-INF/lib/xmlserver.jar;
		    public/WEB-INF/lib/uit-client.jar;
		    public/WEB-INF/lib/uit-server.jar;
		    ${servletapi.jar};
		    ${jspapi.jar};
		    public/WEB-INF/lib/log4j.jar;
		    public/WEB-INF/lib/xmlrpc.jar;
		    public/WEB-INF/lib/uit-security.jar;
		    public/WEB-INF/lib/poi-2.5-final-20040302.jar;
		    public/WEB-INF/lib/eionet-dir.jar;
		    public/WEB-INF/lib/junit.jar;
		    public/WEB-INF/lib/stripes.jar;
		    public/WEB-INF/lib/commons-logging.jar;
		    public/WEB-INF/lib/commons-beanutils-1.7.0.jar;
		    public/WEB-INF/lib/commons-lang-2.3.jar;
		    public/WEB-INF/lib/commons-collections-3.1.jar;
		    public/WEB-INF/lib/displaytag-1.1.1.jar;
		    public/WEB-INF/lib/casclient.jar;' />
	</target>

	<target name='buildjar' depends='compile' description="creates rod.jar into WEB-INF/lib">
		<jar jarfile='${build.home}/rod.jar'
		    includes='**/*.class' basedir='${classes.dir}' />
	</target>

	<target name="preparetarget" description="Creates folder structure if not existing yet">
		<mkdir dir="${build.home}"/>
	</target>

	<target name="prepare" description="Creates folder structure if not existing yet">
		<mkdir dir="${webapp.home}"/>
		<mkdir dir="${webapp.home}/WEB-INF"/>
		<mkdir dir="${webapp.home}/WEB-INF/classes"/>
		<mkdir dir="${webapp.home}/WEB-INF/lib"/>
		<mkdir dir="${webapp.home}/images"/>
		<mkdir dir="${webapp.home}/script"/>
		<mkdir dir="${app.home}"/>
		<mkdir dir="${app.home}/tmp"/>
		<mkdir dir="${app.home}/log"/>
		<mkdir dir="${app.home}/acl"/>
	</target>

	<target name="install" depends="init,copyfiles" description="complete installation">
		<antcall target="checkProps"/>
		<antcall target="create_context"/>
	</target>

	<!-- if it is installed as a new virtual host -->
	<target name="root_context" if="install.vhost" description="suggestion for creating virtual host in server.xml and installation instructions">
                <copy file="context.xml" todir="${webapp.home}/META-INF" overwrite="true">
                        <filterchain>
                                <replacetokens>
                                        <token key="DB.USER" value="${db.user}"/>
                                        <token key="DB.PASSWORD" value="${db.password}"/>
                                        <token key="DB.HOST" value="${db.host}"/>
                                        <token key="DB.DATABASE" value="${db.database}"/>
                                </replacetokens>
                        </filterchain>
                </copy>
		<echo>==================================================================</echo>
		<echo>=== You are installing Web ROD application as a virtual host</echo>
		<echo>=== Remember to add a virtual host TAG into  the server.xml</echo>
		<echo>=== if not existing yet															</echo>
		<echo>===================================================================</echo>
		<echo>=== If it is a first time installation, proceed with the following steps:</echo>
		<echo>=== </echo>
		<echo>=== 1. Check properties files under WEB-INF/classes and correct file/directory properties, if needed.</echo>
		<echo>=== Properties files are rod.properties, uit.properties, log4j.properties, eionetdir.properties</echo>
		<echo>=== 2. Check if user permission files under ${app.home}/acl folder exists. Edit permissions in the files manually or use web-based ACL Admin tool</echo>
		<echo>=== 3. Check script files under the installation root folder and configure crontab</echo>
		<echo>=== Script files are deadlinecalc.sh, deadlines-daemon.sh, harvest.sh</echo>		
		<echo>=== </echo>
		<echo>=== Exact installation instructions can be found from ROD Detailed Design Document.</echo>
		<echo>===================================================================</echo>
	</target>
	
	<target name="create_context">
		<condition property="install.vhost">
			<equals arg1="${vhost}" arg2="true"/>
		</condition>
		<antcall target="root_context"/>
	</target>


	<target name="copyfiles" depends="buildjar" description="Copies all files to deploy dir. Does not overwrite properties files">
		<!-- we do not care about these files older versions -->
		<copy file="WebRODservice.xml" todir="${app.home}" overwrite="true"/>
		<copy file="VERSION.txt" todir="${app.home}" overwrite="true"/>

		<!-- Copy supporting scripts -->
                <copy todir="${app.home}" overwrite="false">
			<fileset dir="src/scripts">
			</fileset>
			<filterchain>
				<replacetokens>
					<token key="WEBAPP.HOME" value="${webapp.home}"/>
					<token key="APP.HOME" value="${app.home}"/>
					<token key="SERVLETAPI.JAR" value="${servletapi.jar}"/>
					<token key="MYSQL.JAR" value="${lib-mysql-connector-jar}"/>
				</replacetokens>
			</filterchain>
                </copy>
		<!-- Copy supporting ACL files -->
		<copy todir="${app.home}/acl" overwrite="false">
			<fileset dir="acl"/>
			<globmapper from="*" to="*.dist"/>
		</copy>

		<!-- Copy JSP files - TODO: Move sources to src/main/webapp -->
		<copy todir="${webapp.home}" overwrite="true">
			<fileset dir="public">
				<exclude name="**/*.java" />
				<exclude name="**/*.properties" />
			</fileset>
		</copy>
		<!-- Copy resource files - TODO: Move resources to src/main/resources -->
                <copy todir="${webapp.home}/WEB-INF/classes" overwrite="true">
			<fileset dir="${src}/resources">
			</fileset>
			<globmapper from="*" to="*.dist"/>
			<filterchain>
				<replacetokens>
					<token key="WEBAPP.HOME" value="${webapp.home}"/>
					<token key="APP.HOME" value="${app.home}"/>
					<token key="DB.USER" value="${db.user}"/>
					<token key="DB.PASSWORD" value="${db.password}"/>
					<token key="DB.HOST" value="${db.host}"/>
					<token key="DB.DATABASE" value="${db.database}"/>
				</replacetokens>
			</filterchain>
                </copy>
		<!-- Copy the application JAR file -->
                <copy todir="${webapp.home}/WEB-INF/lib" overwrite="true" file="target/rod.jar"/>
	</target>
    
<!-- Check  properties files -->
	<target name="checkProps">
		<antcall target="checkUITProps"/>
		<antcall target="checkRODProps"/>
	</target>

	<target name="checkUITProps">
		<loadproperties srcFile="${webapp.home}/WEB-INF/classes/uit.properties"/>
		<condition property="srvdef.not.available">
			<not>
				<available file="${services.definition.file}"/>
			</not>
		</condition>

		<condition property="groupfile.not.available">
			<not>
				<available file="${application.localgroups.file}"/>
			</not>
		</condition>
		<condition property="prms.not.available">
			<not>
				<available file="${application.permissions.file}"/>
			</not>
		</condition>
		<condition property="users.not.available">
			<not>
				<available file="${acl.localusers.xml}"/>
			</not>
		</condition>

		<antcall target="warn_definition"/>
		<antcall target="warn_localgroup"/>
		<antcall target="warn_prms"/>
		<antcall target="warn_users"/>
	</target>

	<target name="checkRODProps">
		<loadproperties srcFile="${webapp.home}/WEB-INF/classes/rod.properties"/>
		<condition property="extractorpath.not.available">
			<not>
				<available file="${extractor.logpath}" type="dir"/>
			</not>
		</condition>
		<antcall target="warn_extractor"/>
	</target>

<!-- Warnings -->

	<target name="warn_definition" if="srvdef.not.available">
		<echo message="==================================================================="/>
		<echo message="Services definition file is not available at: ${services.definition.file}"/>
		<echo message="Please specify the correct location in uit.properties"/>
		<echo message="==================================================================="/>
	</target>

	<target name="warn_localgroup" if="groupfile.not.available">
		<echo message="==================================================================="/>
		<echo message="File for localgroups and users is not available at: ${application.localgroups.file}"/>
		<echo message="Please specify the correct location in uit.properties"/>
		<echo message="==================================================================="/>
	</target>

	<target name="warn_prms" if="prms.not.available">
		<echo message="==================================================================="/>
		<echo message="File for app permissions and descriptions is not available at: ${application.permissions.file}"/>
		<echo message="Please specify the correct location in uit.properties"/>
		<echo message="==================================================================="/>
	</target>

	<target name="warn_users" if="users.not.available">
		<echo message="==================================================================="/>
		<echo message="File for localuser accounts is not available at: ${acl.localusers.xml}"/>
		<echo message="Please specify the correct location in uit.properties"/>
		<echo message="==================================================================="/>
	</target>

	<target name="warn_extractor" if="extractorpath.not.available">
		<echo message="==================================================================="/>
		<echo message="Extractor file path is not available at: ${extractor.logpath}"/>
		<echo message="Please specify the correct location in rod.properties"/>
		<echo message="==================================================================="/>
	</target>

	<target name="clean">
		<delete dir="target"/>
	</target>
</project>
